---

# options attributes for all forms of tail analysis

analyze_group:
  param_decls:
    - '-G'
    - '--group/--individual'
    - 'analyze_group'
  is_eager: true
  default: false
  callback: 'gset_group_opts'
  help: 'set flag to run in group analysis mode; -Gh to see help specific to group analysis'

tickers:  # TODO: allow passing in a .txt file of tickers?
  param_decls:
    - '-T'
    - '--tickers'
  cls: 'VnargsOption'
  separator: ','
  type: 'list'
  default:
    - 'DE 01Y'
    - 'DE 03Y'
    - 'DE 05Y'
    - 'DE 10Y'
  # metavar: '[ <csv on CLI> | <.csv> | <.txt> ]'  # TODO: file options
  # callback: 'set_tickers_from_textfile'
  metavar: '<csv on CLI>'
  help: 'specify the list of tickers from the database to analyse'

# TODO: use specialized Date type (ex. pd.DatetimeIndex) for correct metavar
# and/or alternatively, use callback to validate (likely more cumbersome)
date_i:
  param_decls:
    - '-di'
    - '--date-initial'
    - 'date_i'
  type: 'str'
  default: '1/4/2016'
  metavar: ''  # NOTE: metavar set to '' here so it doesn't show up as 'TEXT'
  help: 'the starting date of the time series to analyse'

date_f:
  param_decls:
    - '-df'
    - '--date-final'
    - 'date_f'
  type: 'str'
  default: '5/5/2016'
  metavar: ''  # NOTE: metavar set to '' here so it doesn't show up as 'TEXT'
  help: 'the final date of the time series to analyse'

approach_args:
  param_decls:
    - '-a'
    - '--approach'
    - 'approach_args'
  cls: 'VnargsOption'
  max_nargs: 2
  is_eager: true
  type: 'tuple'
  default:
    # NOTE: this default map is NOT actually used by the click.Option,
    #       but is instead here for convenient serialization/encoding
    rolling: '1'
    increasing: '1'
    static: null  # TODO: default it to '1' as well for validational convenience?
  show_default: false
  callback: 'validate_approach_args'
  # metavar:  # NOTE: this attr is set by _set_vnargs_choice_metahelp_()
  help: >
    for 'rolling' or 'increasing', optionally specify <INT (# days)>
    as the analysis frequency, default: 1
# ASK/CONFIRM: anal_freq (in normal) == sliding_window (in group)

partition:  # NOTE: opt only available in group tail analysis mode
  param_decls:
    - '-p'
    - '--partition'
  type:
    - 'country'
    - 'maturity'
    - 'region'  # i.e. core (DE, FR, BE) vs. periphery (IT, ES, PT, IR, GR)
    - 'all'
  default: null
  callback: 'confirm_group_flag_set'
  hidden: true  # hide option when using individual tail analysis mode
  help: 'method for aggregating tickers for group tail analysis'

returns_type:
  param_decls:
    - '-rt'
    - '--returns-type'
  type:  # TODO: consider using Enum types for all Choice values
    - 'raw'
    - 'relative'
    - 'log'
  default: 'log'
  help: 'specify the type of returns to analyse'

# TODO: add 'lookback' as additional arg to 'approach_args' VnargsOption??
# If above done, then should validate static approach receives no lookback input
lookback:  # NOTE: only available in dynamic (rolling & increasing) approaches
  param_decls:
    - '-lb'
    - '--lookback'
  type: 'int'
  default: 504
  callback: 'gset_lookback'
  metavar: '<INT (# days)>'
  help: 'lookback (in days) to use for rolling or increasing approaches (N/A for static)'

tau:
  param_decls:
    - '--tau'
    # - 'delta'  # ASK/TODO: isn't 'delta' more fitting varname?
  type:
    - '1'
    - '5'
    - '22'
  default: '1'
  callback: 'cast_tau'
  metavar: '[1 (daily) | 5 (weekly) | 22 (monthly)]'
  help: 'specify the time lag (in days) of the input series'

# TODO: implement system for specifying std/abs targets when approach is not static
#       use VnargsOption and/or feature switches (--before, --after, etc.)
standardize: 
  param_decls:
    - '--std/--no-std'
    - 'standardize'
  is_flag: true
  default: false
  help: 'standardize/normalize the input data'

absolutize:
  param_decls:
    - '--abs/--no-abs'
    - 'absolutize'
  is_flag: true
  default: false
  help: 'take the absolute value of the input data'

anal_right:
  param_decls:
    - '-R/--right-skip'
    - 'anal_right'
  is_flag: true
  default: true
  # default: false
  help: '-R w/o -L to analyze right tail ONLY'

anal_left:
  param_decls:
    - '-L/--left-skip'
    - 'anal_left'
  is_flag: true
  default: true
  # default: false
  help: '-L w/o -R to analyze left tail ONLY'

# # TODO: use bool or feature switches for --tail ??
# #       OR VnargsOption, ex. '--tails left right'
# tail_selection:
#   param_decls:
#     - '-t'
#     - '--tail'
#     - 'tail_selection'
#     # - '-R'
#     # - '-L'
#   type:
#     - 'left'
#     - 'right'
#     - 'both'
#   default: 'both'
#   # callback: ''  # TODO: use cb(?) (or maybe in settings.py) to configure desired short-opts behavior
#   help: 'choose the tail(s) to analyse'

alpha_signif:  # TODO: use full name for var, i.e. alpha_significance?
  param_decls:
    - '--alpha'
    - 'alpha_signif'
  type: 'float'
  default: 0.05
  metavar: '<FLOAT: [0, 1]>'
  help: 'significance of the confidence interval: 1-α'

# TODO/ASK: remove below option? since nature of data can be inferred from database
#           also confirm result of using discrete-fit on continous data; vice versa
data_nature:
  param_decls:
    - '--data-nature'
  type:
    - 'discrete'
    - 'continuous'
  default: 'continuous'
  help: 'discrete: integer data; continuous: real data'

xmin_args:
  param_decls:
    - '-x'
    - '--xmin'
    - 'xmin_args'
  cls: 'VnargsOption'
  max_nargs: 3
  type: 'tuple'
  default:
    # NOTE: this default map is NOT actually used by the click.Option,
    #       but is instead here for convenient serialization/encoding
    clauset: null
    manual: '0'
    percentile: '90'
  show_default: false
  callback: 'validate_xmin_args'
  # metavar:  # NOTE: this attr is set by _set_vnargs_choice_metahelp_()
  help: |  # FIXME: newline below not preserved in --help
    'manual' & 'percentile' rules accept an optional numeric arg:
    {manual: ℝ, [default: 0]}, {percentile: 0-100, [default: 90]}
    # TODO: improve help message above & for similar opts (i.e. approach_args)

ks_flag:  # TODO/FIXME: change name to 'run_ks_test'??
  param_decls:
    - '--ks-run/--ks-skip'
    - 'ks_flag'
  is_eager: true  # is_eager flag needed to customize --help show_default via cb
  default: true
  callback: 'customize_ksflag_show_default'
  metavar: '(Run/Skip KS-Test)'  # FIXME: get metavarto work w/ flags (not shown currently)
  help: '--ks-skip overrides value from --ks-iter'

# TODO: consider add similar skip option as above for logl_stats??

# TODO: make VnargsOption work with flags, then combine --ks-iter & --ks-run?
ks_iter:
  param_decls:
    - '--ks-iter'
  type: 'int'
  default: 100
  metavar: '<INT (# iterations)>'
  help: 'specify number of iterations used for KS-testing'

nproc:
  param_decls:
    - '-N'
    - '--nproc'
  type: 'int'
  is_eager: true  # is_eager flag needed to customize --help show_default via cb
  # default: 1  # NOTE: set 'default' here to override current behavior of using os.cpu_count()
  callback: 'get_nproc_set_show_default'
  metavar: '<INT (# processes)>'
  help: "number of concurrent processes used for analysis"

show_plots:
  param_decls:
    - '--show-plots/--no-show-plots'
    # - 'show_plots'
  is_flag: true
  # type: 'bool'  # TODO: cast this (& others) to proper click.BOOL type?
  default: true
  help: ''

save_plots:
  param_decls:
    - '--save-plots/--no-save-plots'
    # - 'save_plots'
  is_flag: true
  default: false
  help: ''
