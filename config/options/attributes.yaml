---

# options attributes for all forms of tail analysis

# TODO: consider adding the full_dbdf argument declaration in here?
# also create another config file to specify the order in which the
# params & CBs are to be parsed/fired?

run_gui:
  param_decls:
    - '--gui/--cli'
    - 'run_gui'
  is_eager: true
  default: false
  # callback: ''
  help: 'specify which user input system to use'

analyze_group:
  param_decls:
    - '-G/-I'
    - '--group/--individual'
    - 'analyze_group'
  is_eager: true  # NOTE: eagerness of this opt also helps to dynamically set --help of -G-dependent opts
  default: false
  callback: 'gset_group_opts'
  help: 'set flag to run in group analysis mode; -Gh to see group-specific help'

# TODO: change opt to 'labels', i.e. tickers for -I, groups for -G
tickers:  # TODO: allow passing in a .txt file of tickers?
  param_decls:
    - '-T'
    - '--tickers'
  cls: 'VnargsOption'
  separator: ','
  type: 'list'
  default:  # TODO: remove default after project completion
    - 'DE 01Y'
    # - 'DE 03Y'
    # - 'DE 05Y'
    # - 'DE 10Y'
  # metavar: '[ <csv on CLI> | <.csv> | <.txt> ]'
  # callback: 'set_tickers_from_textfile'
  metavar: '<csv on CLI>'
  help: 'specify list of tickers from DB to analyze'

# TODO: use specialized Date type (ex. pd.DatetimeIndex) for correct metavar
# and/or alternatively, use callback to validate (likely more cumbersome)
date_i:
  param_decls:
    - '--di'
    - '--date-initial'
    - 'date_i'
  type: 'str'
  # default: '1/4/2016'  # NOTE: unset 'default' attr to infer date_i
  default: '02-05-2016'  # <--- very short date range for testing/debugging
  metavar: ''  # NOTE: metavar set to '' here so it doesn't show up as 'TEXT'
  help: 'first date to analyze'

date_f:
  param_decls:
    - '--df'
    - '--date-final'
    - 'date_f'
  type: 'str'
  default: '05-05-2016'  # NOTE: unset 'default' attr to infer date_f
  metavar: ''  # NOTE: metavar set to '' here so it doesn't show up as 'TEXT'
  help: 'final date to analyze'

approach_args:
  param_decls:
    - '-a'
    - '--approach'
    - 'approach_args'
  cls: 'VnargsOption'
  max_nargs: 3
  is_eager: true  # NOTE: eagerness required to set lookback for the gset_full_dbdf cb
  type: 'tuple'
  default:
    # NOTE: this default map is NOT actually used by the click.Option,
    #       but is instead here for convenient serialization/encoding
    rolling: ['504', '1']
    increasing: ['504', '1']
    monthly: [null, 1]
    static: [null, null]
  show_default: false
  callback: 'validate_approach_args'
  # metavar:  # NOTE: this attr is set by _set_vnargs_choice_metahelp_()
  help: >
    optional args to 'rolling' / 'increasing': lookback & analysis-frequency (ℤ⁺, ℤ⁺) [ex. "-a rolling 30 2"]

lb_override:
  param_decls:
    - '--lb'
    - '--lookback'
    - 'lb_override'
  type: 'int'
  default: 504
  show_default: false
  metavar: '<ℤ⁺>'
  callback: 'determine_lookback_override'
  help: 'set to override lookback given to --approach (dynamic only)'

partition:  # NOTE: opt only available in group tail analysis mode
  param_decls:
    - '-p'
    - '--partition'
  type:
    - 'country'
    - 'maturity'
    - 'region'  # i.e. core (DE, FR, BE) vs. periphery (IT, ES, PT, IR, GR)
    - 'all'
    - 'none'  # TODO: this should just run individual analysis mode
  default: null
  callback: 'confirm_group_flag_set'
  hidden: true  # hide option when using individual tail analysis mode
  help: 'how to group tickers for group tail analysis'

returns_type:
  param_decls:
    - '--rt'
    - '--returns-type'
    - 'returns_type'
  type:  # TODO: consider using Enum types for all Choice values
    - 'raw'  # TODO: rename to 'basic'
    - 'relative'
    - 'log'
  default: 'log'
  help: 'specify the type of returns to analyze'

tau:
  param_decls:
    - '--tau'
    # - 'delta'  # ASK/TODO: isn't 'delta' more fitting varname?
  type: 'int'
  default: 1
  # callback: 'cast_tau'
  metavar: '<ℤ⁺>'
  # metavar: '[1 (daily) | 5 (weekly) | 22 (monthly)]'
  help: 'specify time lag <# days> of the input series'

standardize: 
  param_decls:
    - '--std'
    - '--standardize/--no-std'
    - 'standardize'
  is_flag: true
  default: false
  help: 'standardize [(X-μ)/σ] input data'

# TODO: create alias -N, --norm for std + abs ??

absolutize:
  param_decls:
    - '--abs'
    - '--absolutize/--no-abs'
    - 'absolutize'
  is_flag: true
  default: false
  help: 'take absolute value of input data'

norm_target:  # NOTE: only available in individual mode & for the static approach
  param_decls:
    - '--norm-series/--norm-tail'  # use boolean flag to fake the 2 mutually exclusive choices
    - 'norm_target'
  is_flag: true
  default: true  # {series: true, tail: false}
  callback: 'validate_norm_target'
  help: "--std and/or --abs TARGET when '-a static'"

norm_before:  # NOTE: opt only available in group tail analysis mode
  param_decls:
    - '--nb'
    - '--norm-before'
    - 'norm_before'
  is_flag: true
  default: false  # set to false in default individual mode so ctx.get_parameter_source works
  show_default: false
  hidden: true  # hide option when using individual tail analysis mode
  help: '--std and/or --abs BEFORE and/or AFTER grouping tickers...'

norm_after:  # NOTE: opt only available in group tail analysis mode
  param_decls:
    - '--na'
    - '--norm-after'
    - 'norm_after'
  is_flag: true
  default: false  # set to false in default individual mode so ctx.get_parameter_source works
  show_default: false
  hidden: true  # hide option when using individual tail analysis mode
  help: '... can set either OR both timing flag(s)  [default: AFTER]'

anal_right:
  param_decls:
    - '-R'
    - '--right/--right-skip'
    - 'anal_right'
  is_flag: true
  default: true  # default to True so if neither tail set, then both analyzed
  help: '-R w/o -L to analyze right tail ONLY'

anal_left:
  param_decls:
    - '-L'
    - '--left/--left-skip'
    - 'anal_left'
  is_flag: true
  default: true  # default to True so if neither tail set, then both analyzed
  help: '-L w/o -R to analyze left tail ONLY'

alpha_signif:
  param_decls:
    - '--alpha'
    - 'alpha_signif'
  type: 'float'
  default: 0.05
  metavar: '<ℝ ∊ [0, 1]>'
  help: 'significance of the confidence interval: 1-α'

data_is_continuous:
  param_decls:
    - '--continuous/--discrete'
    - 'data_is_continuous'
  is_flag: true
  default: true
  # hidden: true  # TODO: or at least hide??
  help: 'data type: continuous~ℝ , discrete~ℤ'

xmin_args:
  param_decls:
    - '-x'
    - '--xmin'
    - 'xmin_args'
  cls: 'VnargsOption'
  max_nargs: 3
  type: 'tuple'
  default:  # NOTE: list below NOT used as default; only used to programmatically set metavar; default actually set in parse_xmin_args()
    - "clauset"
    - "%"
    - "ℝ "
    - "XMINS_FILE"
  show_default: false
  callback: 'parse_xmin_args'
  # metavar:  # NOTE: this attr is set in _set_vnargs_choice_metahelp_()
  help: |  # FIXME: newline(s) below not preserved in --help (adding blank spaces does it, but is janky)
    * clauset : enter "-x clauset" to automatically compute xmin   
    * % (percent): enter ℝ ∊ [0, 100] w/ a %-suffix  [ex. "-x 95%"]
    * ℝ (manual) : enter any ℝ number  [ex. "-x -0.5"]                  
    * XMINS_FILE : pass file w/ date-indexed xmin data

calc_rtrn_stats:
  param_decls:
    - '--rstats/--no-rstats'
    - 'calc_rtrn_stats'
  default: true
  # metavar: ''
  help: 'calculate statistics for returns'

run_ks_test:
  param_decls:
    - '--ks-run/--ks-skip'
    - 'run_ks_test'
  default: true
  metavar: '(Run/Skip KS-Test)'  # FIXME: get metavar to work w/ flags (not shown currently)
  help: 'NOTE: --ks-skip overrides --ks-iter'

# TODO: make VnargsOption work with flags, then combine --ks-iter & --ks-run?
ks_iter:
  param_decls:
    - '--ks-iter'
  type: 'int'
  default: 100
  metavar: '<ℤ⁺>'
  help: 'specify # iterations to use for KS-testing'

compare_distros:
  param_decls:
    - '--compare/--no-compare'
    - 'compare_distros'
  default: true
  metavar: ''  # FIXME: get metavar to work w/ flags (not shown currently)
  help: 'compare the fitted power-law to other distributions using log-likelihoods'

# TODO: hide control & plotting options from --help unless specified by some subcommand/flag (to reduce clutter)

nproc:
  param_decls:
    - '-N'
    - '--nproc'
  type: 'int'
  # default: 1  # NOTE: set 'default' here to override current behavior of using os.cpu_count()
  callback: 'gset_nproc_default'
  metavar: '<ℤ⁺>'
  help: "# of concurrent processes to use"

plot_results:
  param_decls:
    - '--plot/--no-plot'
    - 'plot_results'
  is_flag: true
  # type: 'bool'  # TODO: consider cast this (& other bool-flags) to proper click.BOOL type?
  default: true
  help: ''

show_plots:
  param_decls:
    - '--show-plots/--no-show-plots'
    # - 'show_plots'
  is_flag: true
  default: true
  help: ''

save_plots:
  param_decls:
    - '--save-plots/--no-save-plots'
    # - 'save_plots'
  is_flag: true
  default: false
  help: ''
